// Copyright (c) 2019, The Regents of the University of California (Regents)
// See LICENSE for license details

#ifndef IMU_H
#define IMU_H

#include "RTMath.h"
#include "RTIMU.h"
#include "RTIMUSettings.h"
#include <string.h>

struct imu_acc{
    float x;
    float y;
    float z;
};

float* accout()
{
    int sampleCount = 0;
    int sampleRate = 0;
    uint64_t rateTimer;
    uint64_t displayTimer;
    uint64_t now;
    char* output = new char[100];

    //  Using RTIMULib here allows it to use the .ini file generated by RTIMULibDemo.
    //  Or, you can create the .ini in some other directory by using:
    //      RTIMUSettings *settings = new RTIMUSettings("<directory path>", "RTIMULib");
    //  where <directory path> is the path to where the .ini file is to be loaded/saved

    RTIMUSettings *settings = new RTIMUSettings("RTIMULib");

    RTIMU *imu = RTIMU::createIMU(settings);

    if ((imu == NULL) || (imu->IMUType() == RTIMU_TYPE_NULL)) {
        printf("No IMU found\n");
        exit(1);
    }

    //  This is an opportunity to manually override any settings before the call IMUInit

    //  set up IMU

    imu->IMUInit();

    //  this is a convenient place to change fusion parameters

    imu->setSlerpPower(0.02);
    imu->setGyroEnable(true);
    imu->setAccelEnable(true);
    imu->setCompassEnable(true);

    //  set up for rate timer

    rateTimer = displayTimer = RTMath::currentUSecsSinceEpoch();

    //  now just process data

    //while (1) {
        //  poll at the rate recommended by the IMU

        usleep(imu->IMUGetPollInterval() * 1000);

        while (imu->IMURead()) {
            RTIMU_DATA imuData = imu->getIMUData();
            sampleCount++;

            now = RTMath::currentUSecsSinceEpoch();

            //  display 10 times per second

	    // if ((now - displayTimer) > 500000) {
	        //printf(RTMath::displayRadians("Gyroscope", imuData.gyro));
		//printf(RTMath::displayRadians("Acclerometer", imuData.accel));
                strcpy(output, RTMath::displayRadians("Acclerometer", imuData.accel));
                //printf(output);
		//printf("\n");
                fflush(stdout);
                displayTimer = now;
		// }

            //  update rate every second

            if ((now - rateTimer) > 1000000) {
                sampleRate = sampleCount;
                sampleCount = 0;
                rateTimer = now;
            }
        }
        char * pch;
        char *value[10];
        float *otpt = new float[3];
        int i = 0;
    
        pch = strtok(output," ,:");
        while (pch != NULL)
        {
          value[i] = pch;
          pch = strtok(NULL, " ,:");
      //printf ("%s\n",value[i]);
          i++; 
        }
    
        otpt[0] = atof(value[2]);
        otpt[1] = atof(value[4]);
        otpt[2] = atof(value[6]);
        return(otpt);
	//}
}


void run_imu(imu_acc &out){
    float* imu_result = accout();
    out.x = imu_result[0];
    out.y = imu_result[1];
    out.z = imu_result[2];
}


#endif
